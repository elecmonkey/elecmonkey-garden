name: 部署到服务器

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发
  workflow_dispatch:    # 允许手动触发工作流程

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 git 历史
      
      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10  # 使用 pnpm 8.x 版本
      
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'  # 使用 pnpm 缓存
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 构建项目
        run: pnpm build
      
      - name: 运行测试
        run: |
          if grep -q "\"test\":" "package.json"; then
            pnpm test
          else
            echo "没有找到测试脚本，跳过测试步骤"
          fi
      
      - name: 打包上传文件
        run: |
          # 创建包含必要文件的部署目录
          mkdir -p deploy
          
          # 复制 Next.js 构建产物
          cp -r .next/standalone/.next deploy/
          cp -r .next/standalone/src deploy/
          cp -r .next/standalone/package.json deploy/
          cp -r .next/static deploy/.next/

          cp .next/standalone/server.js deploy/
          cp pnpm-lock.yaml deploy/
          
          # 显示文件夹总大小
          echo "部署目录总大小："
          du -sh deploy/

          echo "开始传输文件..."
          # 确保 .ssh 目录存在并设置正确权限
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 将 SSH 私钥写入临时文件
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 添加服务器到 known_hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          echo "开始使用rsync传输文件到服务器..."
          if rsync -avz --delete \
            --exclude='.next/cache/' \
            --exclude='.next/trace' \
            --exclude='.next/analyze' \
            --exclude='.next/standalone/node_modules/' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./deploy/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/deploy/; then
            echo "✅ 文件传输成功！"
          else
            echo "❌ 文件传输失败，退出代码: $?"
            exit 1
          fi

          # 删除临时文件
          rm -f ~/.ssh/known_hosts
          rm -f ~/.ssh/id_rsa
          echo "文件传输完成"
      

      - name: 配置服务器并启动应用
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 设置变量
            APP_ROOT="${{ secrets.REMOTE_TARGET_DIR }}"
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            RELEASE_DIR="$APP_ROOT/releases/release-$TIMESTAMP"
            CURRENT_LINK="$APP_ROOT/current"
            
            echo "开始蓝绿部署流程..."
            
            # 确保目录结构存在
            mkdir -p "$RELEASE_DIR" "$APP_ROOT/releases"
            
            # 1. 复制文件到新发布目录
            echo "从临时目录复制文件到新发布目录..."
            rsync -a /tmp/deploy/ "$RELEASE_DIR/"
            
            # 创建回滚脚本
            echo "创建回滚脚本..."
            cat > "$RELEASE_DIR/rollback.sh" << 'EOF'
            #!/bin/bash
            APP_ROOT="${{ secrets.REMOTE_TARGET_DIR }}"
            CURRENT_LINK="$APP_ROOT/current"
            RELEASES_DIR="$APP_ROOT/releases"
            
            # 获取当前版本
            CURRENT_VERSION=$(basename $(readlink $CURRENT_LINK))
            
            # 获取上一个版本（按时间排序）
            PREVIOUS_VERSION=$(ls -1t $RELEASES_DIR | grep -v "$CURRENT_VERSION" | head -1)
            
            if [ -z "$PREVIOUS_VERSION" ]; then
              echo "❌ 没有找到可回滚的版本！"
              exit 1
            fi
            
            echo "🔄 正在回滚到版本: $PREVIOUS_VERSION"
            
            # 原子操作切换符号链接
            ln -sfn "$RELEASES_DIR/$PREVIOUS_VERSION" "$CURRENT_LINK.rollback"
            mv -T "$CURRENT_LINK.rollback" "$CURRENT_LINK"
            
            # 使用PM2重新加载应用
            cd $CURRENT_LINK
            NODE_OPTIONS="--preserve-symlinks" pm2 reload elecmonkey-garden \
              --update-env --max-memory-restart 768M
            
            echo "✅ 回滚完成"
            exit 0
            EOF
            
            chmod +x "$RELEASE_DIR/rollback.sh"
            
            # 2. 在非活跃目录中安装依赖
            cd "$RELEASE_DIR"
            echo "在非活跃目录安装生产依赖..."
            pnpm install --prod --frozen-lockfile
            
            # 3. 原子操作切换符号链接 - 从非活跃变为活跃
            echo "切换到新版本..."
            ln -sfn "$RELEASE_DIR" "$CURRENT_LINK.new"
            mv -T "$CURRENT_LINK.new" "$CURRENT_LINK"
            
            # 4. 重载应用
            echo "重载应用..."
            # cd "$CURRENT_LINK"
            
            # 如果应用不存在，则首次启动
            if ! pm2 list | grep -q "elecmonkey-garden"; then
              echo "首次启动应用..."
              NODE_OPTIONS="--preserve-symlinks" pm2 start server.js \
                --name elecmonkey-garden \
                -i 2 \
                --time \
                --max-memory-restart 768M \
                --kill-timeout 5000 \
                --no-autorestart \
                --no-watch \
                --env production \
                --update-env \
                --cwd "$CURRENT_LINK"
            else
              echo "平滑重载应用..."
              NODE_OPTIONS="--preserve-symlinks" pm2 reload elecmonkey-garden \
                --update-env \
                --max-memory-restart 768M \
                --kill-timeout 5000 \
                --restart-delay=5000
            fi
            
            # 保存PM2配置
            pm2 save
            
            # 给应用一些启动时间
            echo "等待应用启动..."
            sleep 5
            
            # 5. 现在创建健康检查脚本并执行健康检查
            echo "创建健康检查脚本..."
            cat > "$CURRENT_LINK/health-check.sh" << 'EOF'
            #!/bin/bash
            MAX_RETRIES=30
            RETRY_INTERVAL=2
            APP_URL="http://localhost:3000/api/health"
            
            echo "开始健康检查..."
            
            for i in $(seq 1 $MAX_RETRIES); do
              # 调用健康检查API
              response=$(curl -s $APP_URL)
              status=$(echo $response | grep -o '"status":"ok"' || echo "")
              
              if [ ! -z "$status" ]; then
                echo "✅ 健康检查通过！"
                exit 0
              else
                echo "⏳ 尝试 $i/$MAX_RETRIES: 服务尚未就绪"
                sleep $RETRY_INTERVAL
              fi
            done
            
            echo "❌ 健康检查失败！超出最大重试次数。"
            exit 1
            EOF
            chmod +x "$CURRENT_LINK/health-check.sh"
            
            echo "执行健康检查..."
            if "$CURRENT_LINK/health-check.sh"; then
              echo "✅ 健康检查通过，部署成功完成！"
            else
              echo "❌ 健康检查失败，正在回滚到上一个稳定版本..."
              "$CURRENT_LINK/rollback.sh"
              echo "已回滚到上一个稳定版本"
              exit 1
            fi
            
            # 6. 部署成功后，清理旧版本，保留最近5个
            echo "清理旧版本..."
            cd "$APP_ROOT/releases"
            ls -1tr | head -n -5 | xargs -r rm -rf
            
            echo "蓝绿部署完成：$(date)"
            
            # 显示当前部署状态
            echo "当前PM2状态:"
            pm2 status
            echo "当前部署版本: $TIMESTAMP"