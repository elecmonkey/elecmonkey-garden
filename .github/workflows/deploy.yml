name: 部署到服务器

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发
  workflow_dispatch:    # 允许手动触发工作流程

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 git 历史
      
      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8  # 使用 pnpm 8.x 版本
      
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'  # 使用 pnpm 缓存
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 构建项目
        run: pnpm build
      
      - name: 运行测试 (如果有)
        run: |
          if grep -q "\"test\":" "package.json"; then
            pnpm test
          else
            echo "没有找到测试脚本，跳过测试步骤"
          fi
      
      - name: 打包上传文件
        run: |
          # 创建包含必要文件的部署目录
          mkdir -p deploy
          
          # 复制 Next.js 构建产物
          cp -r .next deploy/
          
          # 复制必要的文件
          cp package.json pnpm-lock.yaml deploy/
          
          # 复制其他必要的静态文件和配置
          if [ -d "public" ]; then
            cp -r public deploy/
          fi
          
          # 显示文件夹总大小
          echo "部署目录总大小："
          du -sh deploy/

          echo "开始传输文件..."
          # 确保 .ssh 目录存在并设置正确权限
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # 将 SSH 私钥写入临时文件
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 添加服务器到 known_hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          echo "开始使用rsync传输文件到服务器..."
          if rsync -avz --delete \
            --exclude='.next/cache/' \
            --exclude='.next/trace' \
            --exclude='.next/analyze' \
            --exclude='.next/routes-manifest.json' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            ./deploy/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tmp/deploy/; then
            echo "✅ 文件传输成功！"
          else
            echo "❌ 文件传输失败，退出代码: $?"
            exit 1
          fi

          # 删除临时 SSH 密钥文件
          rm -f ~/.ssh/id_rsa
          echo "文件传输完成"
      

      - name: 配置服务器并启动应用
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # 进入项目目录
            cd ${{ secrets.REMOTE_TARGET_DIR }}
            
            # 备份当前部署（以防需要回滚）
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p ~/backups
            if [ -d ".next" ]; then
              cp -r .next ~/backups/.next_$timestamp
            fi
            
            # 检查/tmp/deploy目录是否存在及其中是否包含.next目录
            if [ ! -d "/tmp/deploy" ]; then
              echo "❌ 错误: /tmp/deploy 目录不存在！同步可能失败。"
              exit 1
            fi
            
            echo "检查同步的文件目录内容（包括隐藏文件）："
            ls -lha /tmp/deploy/
            
            if [ ! -d "/tmp/deploy/.next" ]; then
              echo "❌ 错误: /tmp/deploy/.next 目录不存在！部署终止。"
              echo "同步目录中的内容："
              find /tmp/deploy -type d | sort
              exit 1
            else
              echo "✅ .next 目录存在，继续部署..."
            fi
            
            # 直接使用rsync同步的/tmp/deploy目录中的文件
            echo "从/tmp/deploy目录同步文件..."
            
            # 检查是否安装了rsync，如果没有则使用cp命令
            if command -v rsync > /dev/null; then
              # 使用rsync同步文件
              rsync -a --delete \
                --exclude='.git' \
                --exclude='public/uploads' \
                --exclude='node_modules' \
                --exclude='.next/cache/' \
                --exclude='.next/trace' \
                --exclude='.next/analyze' \
                --exclude='.next/routes-manifest.json' \
                /tmp/deploy/ ./
            else
              # 使用cp命令复制文件
              echo "rsync未安装，使用cp命令替代"
              rm -rf .next package.json pnpm-lock.yaml
              [ -d "public" ] && mv public/uploads public_uploads || true
              cp -a /tmp/deploy/. ./
              [ -d "public_uploads" ] && mkdir -p public && mv public_uploads public/uploads || true
            fi
            
            # 在服务器端安装生产依赖
            echo "在服务器端安装生产依赖..."
            pnpm install --prod --frozen-lockfile
            
            # 清理临时文件
            rm -rf /tmp/deploy
            
            # 查看环境和目录结构（显示隐藏文件）
            echo "当前目录: $(pwd)"
            echo "目录内容（包括隐藏文件）:"
            ls -lha
            echo "next路径检查:"
            find . -name next -type f
            
            # 直接使用 PM2 启动 Next.js 应用，使用绝对路径
            NEXT_BIN="$(pwd)/node_modules/.bin/next"
            
            if [ -f "$NEXT_BIN" ]; then
              echo "找到next执行文件: $NEXT_BIN"
            else
              echo "未找到next执行文件，尝试重新安装"
              pnpm install --prod
              if [ -f "$NEXT_BIN" ]; then
                echo "安装后找到next执行文件: $NEXT_BIN"
              else
                echo "仍然未找到next执行文件，列出node_modules/.bin目录:"
                ls -la node_modules/.bin || echo "node_modules/.bin目录不存在"
              fi
            fi
            
            # 直接使用PM2启动Next.js应用
            pm2 delete "elecmonkey-garden" 2>/dev/null || true
            pm2 reload "elecmonkey-garden" || pm2 start "pnpm run start" --name "elecmonkey-garden" --cwd ${{ secrets.REMOTE_TARGET_DIR }}
            
            # 保存PM2配置，确保服务器重启后自动启动
            echo "保存PM2配置"
            pm2 save
            
            # 确保PM2开机自启（如果尚未配置）
            if ! pm2 list | grep -q "module" || ! systemctl list-unit-files | grep -q "pm2-"; then
              echo "配置PM2开机自启"
              sudo env PATH=$PATH:/usr/bin pm2 startup || pm2 startup || echo "无法自动配置PM2开机自启，可能需要手动配置"
              pm2 save
            fi
            
            echo "部署完成：$(date)"
